/*
 * Copyright (C) 2020 Niall 'Rivernile' Scott
 *
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will the authors or contributors be held liable for
 * any damages arising from the use of this software.
 *
 * The aforementioned copyright holder(s) hereby grant you a
 * non-transferrable right to use this software for any purpose (including
 * commercial applications), and to modify it and redistribute it, subject to
 * the following conditions:
 *
 *  1. This notice may not be removed or altered from any file it appears in.
 *
 *  2. Any modifications made to this software, except those defined in
 *     clause 3 of this agreement, must be released under this license, and
 *     the source code of any modifications must be made available on a
 *     publically accessible (and locateable) website, or sent to the
 *     original author of this software.
 *
 *  3. Software modifications that do not alter the functionality of the
 *     software but are simply adaptations to a specific environment are
 *     exempt from clause 2.
 *
 */

package uk.org.rivernile.android.bustracker.ui.news

import uk.org.rivernile.android.bustracker.core.endpoints.twitter.Tweet

/**
 * This class represents the UI state, which is generated by [TwitterUpdatesFragmentViewModel] and
 * consumed and applied by [TwitterUpdatesFragment].
 *
 * @author Niall Scott
 */
sealed class UiState {

    /**
     * Show the empty progress state. This is when progress should be shown, but there's no previous
     * content to show.
     */
    object ShowEmptyProgress : UiState()

    /**
     * Show the populated progress state. This is when progress should be shown, and there's
     * previous content that is being shown - this is so that the content still shows while the
     * new content loads.
     */
    object ShowPopulatedProgress : UiState()

    /**
     * Show the loaded content.
     *
     * @param tweets The [List] of [Tweet]s to show the user.
     */
    data class ShowContent(val tweets: List<Tweet>) : UiState()

    /**
     * Show the empty error state. This is when an error should be shown, and there's no content
     * currently shown.
     *
     * @param error The error to be shown.
     */
    data class ShowEmptyError(val error: Error) : UiState()

    /**
     * Show the refresh error state. This is when an error should be shown and there's previous
     * content currently showing on-screen.
     *
     * @param error The error to be shown.
     */
    data class ShowRefreshError(val error: Error) : UiState()
}